#! /bin/sh
### BEGIN INIT INFO
# Provides:          daemonshepherd
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Daemon supervisor
### END INIT INFO

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="daemonshepherd"
NAME=daemonshepherd
DAEMON=/usr/bin/daemonshepherd
PIDFILE=/var/run/$NAME.pid
CONTROL_SOCKET=/var/run/$NAME.sock
SCRIPTNAME=/etc/init.d/$NAME

DAEMONSHEPHERD_CONFIG=/etc/seismometer/daemonshepherd.yaml
#DAEMONSHEPHERD_LOG_CONFIG=/etc/seismometer/daemonshepherd.logging
DAEMONSHEPHERD_LOG_CONFIG=

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon
#
do_start() {
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  if [ ! -e "$DAEMONSHEPHERD_CONFIG" ]; then
    log_failure_msg "$NAME configuration file $DAEMONSHEPHERD_CONFIG doesn't exist"
    return 2
  fi
  if [ -n "$DAEMONSHEPHERD_LOG_CONFIG" ] && \
     [ ! -e "$DAEMONSHEPHERD_LOG_CONFIG" ]; then
    log_failure_msg "$NAME logging config file $DAEMONSHEPHERD_LOG_CONFIG doesn't exist"
    return 2
  fi

  start-stop-daemon --start --quiet > /dev/null \
    --pidfile $PIDFILE \
    --name ${DAEMON##*/} --exec /usr/bin/python --test || return 1
  start-stop-daemon --start --quiet \
    --pidfile $PIDFILE \
    --exec $DAEMON -- \
      --background \
      --daemons $DAEMONSHEPHERD_CONFIG \
      ${DAEMONSHEPHERD_LOG_CONFIG:+--logging $DAEMONSHEPHERD_LOG_CONFIG} \
      --control-socket $CONTROL_SOCKET \
      --pid-file $PIDFILE || return 2
}

#
# Function that stops the daemon
#
do_stop() {
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  start-stop-daemon --stop --quiet \
    --retry=TERM/30/KILL/5 \
    --pidfile $PIDFILE --name ${DAEMON##*/}
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2

  rm -f $PIDFILE
  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon
#
do_reload() {
  start-stop-daemon --stop --signal HUP --quiet \
    --pidfile $PIDFILE --name ${DAEMON##*/}
  return 0
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) log_end_msg 0 ;;
      2)   log_end_msg 1 ;;
    esac
  ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) log_end_msg 0 ;;
      2)   log_end_msg 1 ;;
    esac
  ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
  ;;
  reload|force-reload)
    log_daemon_msg "Reloading $DESC" "$NAME"
    do_reload
    log_end_msg $?
  ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1 ;; # Old process is still running
          *) log_end_msg 1 ;; # Failed to start
        esac
      ;;
      *)
        # Failed to stop
        log_end_msg 1
      ;;
    esac
  ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|reload|force-reload}" >&2
    exit 3
  ;;
esac

:
