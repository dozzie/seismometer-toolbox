#!/usr/bin/python

import sys
import optparse
import seismometer.input
import seismometer.output
import seismometer.spool
import seismometer.messenger
import yaml
import logging
import traceback
import seismometer.logging
import signal

#-----------------------------------------------------------------------------
# command line options {{{

parser = optparse.OptionParser(
    usage = "%prog [options]",
    description = "Simple logs and monitoring message forwarder.",
)

parser.add_option(
    "--destination", "--dest", dest = "destination",
    action = "append", default = [],
    help = "where to send messages (stdout, tcp:HOST:PORT, ssl:HOST:PORT,"
           " udp:HOST:PORT, or unix:PATH; stdout is the default)",
    metavar = "ADDR",
)
parser.add_option(
    "--source", "--src", dest = "source",
    action = "append", default = [],
    help = "where to read/expect messages from (stdin, tcp:PORT,"
           " tcp:BINDADDR:PORT, udp:PORT, udp:BINDADDR:PORT, or unix:PATH;"
           " stdin is the default)",
    metavar = "ADDR",
)
parser.add_option(
    "--tagfile", dest = "tag_file",
    help = "definitions used to convert Graphite-like tags to \"location\" for"
           " Seismometer Message",
    metavar = "TAGFILE",
)
parser.add_option(
    "--ssl-ca-file", dest = "ssl_ca_file",
    help = "file with CA certificates for SSL connection"
           " (without this option no server verification is performed)",
    metavar = "CA_FILE",
)
parser.add_option(
    "--spool", dest = "spool_dir",
    help = "directory to spool messages in case of network problems",
    metavar = "SPOOLDIR",
)
parser.add_option(
    "--max-spool", dest = "max_spool",
    help = "how much to keep in spool before dropping the earliest messages"
           " (in bytes; allowed suffixes are 'k' and 'M')",
    metavar = "SIZE",
)
parser.add_option(
    "--logging", dest = "logging_config",
    default = None,
    help = "YAML/JSON file with logging configuration",
    metavar = "FILE",
)

# }}}
#-----------------------------------------------------------------------------

(options, args) = parser.parse_args()

if len(args) > 0:
    parser.error("too many arguments")

if len(options.source) == 0:
    options.source = ["stdin"]

if len(options.destination) == 0:
    options.destination = ["stdout"]

seismometer.logging.configure_from_file(options.logging_config, default = "stderr")
logger = logging.getLogger()

def exception_logger(exctype, value, tb):
    logger.critical("Uncaught exception: %s", value)
    for chunk in traceback.format_exception(exctype, value, tb):
        for line in chunk.split("\n"):
            if line == "": continue
            logger.critical(line)

sys.excepthook = exception_logger

#-----------------------------------------------------------------------------
# --source options parsing {{{

def prepare_source(source):
    if source == "stdin":
        logger.info("adding source: STDIN")
        return seismometer.input.stdin.STDIN()

    if source.startswith("tcp:"):
        if ":" in source[4:]:
            (host, port) = source[4:].split(":")
            port = int(port)
            logger.info("adding source: TCP:*:%d", port)
        else:
            host = None
            port = int(source[4:])
            logger.info("adding source: TCP:%s:%d", host, port)
        return seismometer.input.inet.TCP(host, port)

    if source.startswith("udp:"):
        if ":" in source[4:]:
            (host, port) = source[4:].split(":")
            port = int(port)
            logger.info("adding source: UDP:*:%d", port)
        else:
            host = None
            port = int(source[4:])
            logger.info("adding source: UDP:%s:%d", host, port)
        return seismometer.input.inet.UDP(host, port)

    if source.startswith("unix:"):
        path = source[5:]
        logger.info("adding source: UNIX:%s", path)
        return seismometer.input.unix.UNIX(path)

    import json
    params = json.loads(source)
    # TODO: log this
    # TODO: document this
    return seismometer.input.plugin.Plugin(params['class'], params)

# }}}
#-----------------------------------------------------------------------------
# --destination options parsing {{{

#-----------------------------------------------------------
# spooler creation {{{

def create_spooler():
    if options.max_spool is None:
        return None

    if options.max_spool.endswith("k") or options.max_spool.endswith("K"):
        max_spool_size = int(options.max_spool[0:-1]) * 1024
    elif options.max_spool.endswith("m") or options.max_spool.endswith("M"):
        max_spool_size = int(options.max_spool[0:-1]) * 1024 * 1024
    else:
        max_spool_size = int(options.max_spool)

    if options.spool_dir is not None:
        # TODO: implement disk spooler
        raise NotImplementedError("spooling to disk not supported yet")
    else:
        return seismometer.spool.MemorySpooler(max = max_spool_size)

# }}}
#-----------------------------------------------------------

def prepare_destination(destination):
    if destination == "stdout":
        logger.info("adding destination: STDOUT")
        return seismometer.output.stdout.STDOUT()

    if destination.startswith("tcp:"):
        (host, port) = destination[4:].split(":")
        port = int(port)
        logger.info("adding destination: TCP:%s:%d", host, port)
        spooler = create_spooler()
        return seismometer.output.inet.TCP(host, port, spooler)

    if destination.startswith("ssl:"):
        (host, port) = destination[4:].split(":")
        port = int(port)
        ca_file = options.ssl_ca_file
        logger.info("adding destination: SSL:%s:%d", host, port)
        spooler = create_spooler()
        return seismometer.output.inet.SSL(host, port, ca_file, spooler)

    if destination.startswith("udp:"):
        (host, port) = destination[4:].split(":")
        port = int(port)
        logger.info("adding destination: UDP:%s:%d", host, port)
        return seismometer.output.inet.UDP(host, port)

    if destination.startswith("unix:"):
        path = destination[5:]
        logger.info("adding destination: UNIX:%s", path)
        spooler = create_spooler()
        return seismometer.output.unix.UNIX(path, spooler)

    import json
    params = json.loads(destination)
    # TODO: log this
    # TODO: document this
    return seismometer.output.plugin.Plugin(params['class'], params)

# }}}
#-----------------------------------------------------------------------------

sources      = [prepare_source(o)      for o in options.source]
destinations = [prepare_destination(o) for o in options.destination]

tag_matcher = seismometer.messenger.TagMatcher(options.tag_file)
reader = seismometer.messenger.MessengerReader(tag_matcher)
writer = seismometer.output.Writer()

for s in sources:
    reader.add(s)
for d in destinations:
    writer.add(d)

#-----------------------------------------------------------------------------

# TODO:
#   * SIGUSR1: reload logging config
#   * SIGPIPE: SIG_IGN (when can it break things and how?)

def reload_tags(sig, stack_frame):
    logger = logging.getLogger("config")
    try:
        logger.info("reloading tag matcher")
        tag_matcher.reload()
    except Exception, e:
        logger.warn("tag matcher reload problem: %s", str(e))

def quit_daemon(sig, stack_frame):
    logger.info("received signal; shutting down")
    sys.exit(0)

signal.signal(signal.SIGHUP, reload_tags)
signal.signal(signal.SIGINT, quit_daemon)
signal.signal(signal.SIGTERM, quit_daemon)

#-----------------------------------------------------------------------------
# main loop

try:
    while True:
        message = reader.read()
        writer.write(message)
except seismometer.input.EOF:
    # this is somewhat expected: all the input descriptors are closed (e.g.
    # only STDIN was specified)
    pass

#-----------------------------------------------------------------------------
# vim:ft=python:foldmethod=marker
