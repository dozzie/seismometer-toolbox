#!/usr/bin/python

import sys
import optparse
import seismometer.plugin
import seismometer.output
import seismometer.message
import seismometer.dumbprobe

#-----------------------------------------------------------------------------
# parse command line options {{{

parser = optparse.OptionParser(
    usage = "%prog --checks=PYFILE [--destination=stdout | --destination=host:port:channel]",
)

parser.add_option(
    "--checks", dest = "checks",
    help = "load checks from *.py file", metavar = "PYFILE",
)
parser.add_option(
    "--destination", dest = "destination", default = "stdout",
    help = "where to submit messages to (host:port:channel or stdout;"
           " stdout is the default)",
    metavar = "TARGET",
)

(options, args) = parser.parse_args()

if options.checks is None:
    parser.print_help()
    sys.exit(1)

# }}}
#-----------------------------------------------------------------------------
# load checks

ploader = seismometer.plugin.PluginLoader()
checks_mod = ploader.load('seismometer.dumbprobe.__config__', options.checks)
checks = checks_mod.CHECKS
ploader.close()
if isinstance(checks, (list, tuple)):
    checks = seismometer.dumbprobe.Checks(checks)

# TODO: other output modules
output = seismometer.output.stdout.STDOUT()

#-----------------------------------------------------------------------------
# main loop

try:
    while True:
        for msg in checks.run_next():
            if isinstance(msg, seismometer.message.Message):
                output.send(msg.to_dict())
            else: # dict
                output.send(msg)
except KeyboardInterrupt:
    pass

#-----------------------------------------------------------------------------
# vim:ft=python:foldmethod=marker
