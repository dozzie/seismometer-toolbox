#!/usr/bin/python

import sys
import os
import optparse
import logging
import socket
import traceback
import seismometer.logging
import signal
import json
import time
import seismometer.message
import seismometer.poll
import seismometer.prio_queue

#-----------------------------------------------------------------------------
# command line options {{{

#-------------------------------------------------------
# custom option types {{{

def check_interval(option, opt, value):
    try:
        if value.endswith("h"):
            result = 60 * 60 * int(value[:-1])
        elif value.endswith("m"):
            result = 60 * int(value[:-1])
        elif value.endswith("s"):
            result = int(value[:-1])
        else: # no suffix
            result = int(value)
        if result > 0:
            return result
        raise optparse.OptionValueError(
            "option %s: negative interval value: %r" % (opt, value)
        )
    except ValueError:
        raise optparse.OptionValueError(
            "option %s: invalid interval value: %r" % (opt, value)
        )

def check_count(option, opt, value):
    try:
        result = int(value)
        if result > 0:
            return result
        raise optparse.OptionValueError(
            "option %s: negative count: %r" % (opt, value)
        )
    except ValueError:
        raise optparse.OptionValueError(
            "option %s: invalid count value: %r" % (opt, value)
        )

def check_fraction(option, opt, value):
    try:
        result = float(value)
        if 0.0 <= result and result <= 1.0:
            return result
        raise optparse.OptionValueError(
            "option %s: invalid fraction value: %r" % (opt, value)
        )
    except ValueError:
        raise optparse.OptionValueError(
            "option %s: invalid fraction value: %r" % (opt, value)
        )


class HailerterOption(optparse.Option):
    TYPES = optparse.Option.TYPES + (
        "interval",
        "count",
        "fraction",
    )
    TYPE_CHECKER = optparse.Option.TYPE_CHECKER.copy()
    TYPE_CHECKER["interval"] = check_interval
    TYPE_CHECKER["count"] = check_count
    TYPE_CHECKER["fraction"] = check_fraction

# }}}
#-------------------------------------------------------

parser = optparse.OptionParser(
    option_class = HailerterOption,
    usage = "%prog [options]",
    #description = "Foo bar baz.",
)

parser.add_option(
    "--logging", dest = "logging_config",
    default = None,
    help = "YAML/JSON file with logging configuration",
    metavar = "FILE",
)
parser.add_option(
    "--socket", dest = "control_socket",
    default = None,
    help = "path to control socket",
    metavar = "PATH",
)

parser.add_option(
    "--notify", dest = "notification_interval",
    type = "interval", default = 2 * 3600, # 2 hours
    help = "notification interval for streams that are still degraded,"
           " missing, or flapping (default: 2 hours)",
    metavar = "INTERVAL",
)
parser.add_option(
    "--default-interval", dest = "default_interval",
    type = "interval", default = None,
    help = "collection interval to assume for streams that don't provide one",
    metavar = "INTERVAL",
)
parser.add_option(
    "--missing", dest = "missing",
    type = "count", default = None,
    help = "number of messages after which stream is deemed missing",
    metavar = "COUNT",
)
parser.add_option(
    "--flapping-window", dest = "flapping_window",
    type = "count", default = None,
    help = "number of messages to calculate stream flapping",
    metavar = "COUNT",
)
parser.add_option(
    "--flapping-threshold", dest = "flapping_threshold",
    type = "fraction", default = None,
    help = "fraction of messages in flapping window to deem stream flapping",
    metavar = "FRACTION",
)

(options, args) = parser.parse_args()

# }}}
#-----------------------------------------------------------------------------
# logging configuration {{{

seismometer.logging.configure_from_file(options.logging_config, default = "stderr")
logger = logging.getLogger()

def exception_logger(exctype, value, tb):
    logger.critical("Uncaught exception: %s", value)
    for chunk in traceback.format_exception(exctype, value, tb):
        for line in chunk.split("\n"):
            if line == "": continue
            logger.critical(line)

sys.excepthook = exception_logger

# }}}
#-----------------------------------------------------------------------------
# signal handlers {{{

def quit_program(sig, stack_frame):
    logger.info("received signal; shutting down")
    sys.exit(0)

signal.signal(signal.SIGHUP, quit_program)
signal.signal(signal.SIGINT, quit_program)
signal.signal(signal.SIGTERM, quit_program)

# }}}
#-----------------------------------------------------------------------------
# control socket {{{

class ControlSocket:
    def __init__(self, address):
        self.path = os.path.abspath(address)
        self.socket = None
        conn = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        conn.bind(self.path)
        # only set self.socket after bind(), so the file won't get removed
        # when it's not ours (e.g. existed already)
        self.socket = conn
        self.socket.listen(1)

    def __del__(self):
        self.close()

    def accept(self):
        (conn, addr) = self.socket.accept()
        return ControlSocketClient(conn)

    def fileno(self):
        return self.socket.fileno()

    def close(self):
        if self.socket is not None:
            self.socket.close()
            self.socket = None
            if self.path is not None:
                os.remove(self.path)

class ControlSocketClient:
    def __init__(self, socket):
        self.socket = socket

    def __del__(self):
        self.close()

    def read(self):
        line = None
        while line is None:
            try:
                line = self.socket.recv(4096)
            except socket.error, e:
                if e.errno != errno.EWOULDBLOCK and e.errno != errno.EAGAIN:
                    raise
        if line == "":
            return None
        try:
            return json.loads(line)
        except:
            return None

    def send(self, message):
        self.socket.send(json.dumps(message) + "\n")

    def fileno(self):
        return self.socket.fileno()

    def close(self):
        if self.socket is not None:
            self.socket.close()
            self.socket = None

# }}}
#-----------------------------------------------------------------------------
# core: state tracker machine

class Constant:
    def __init__(self, type, name):
        self.type = type
        self.name = name
    def __repr__(self):
        return "<%s %s:%s>" % (self.__class__.__name__, self.type, self.name)
    def __str__(self):
        # important for building reports
        return str(self.name)

STATUS_OK       = Constant("status", "ok")
STATUS_ERROR    = Constant("status", "error")
STATUS_MISSING  = Constant("status", "missing")
STATUS_FLAPPING = Constant("status", "flapping")
STATUS_DISCARD  = Constant("status", "discard")

class StateTracker:
    #-------------------------------------------------------
    # StateTracker.Flow {{{

    class Flow:
        def __init__(self, aspect, location, flapping = (1, 1.0)):
            self.aspect = aspect
            self.location = location
            self.status = None
            self.status_time = 0 # timestamp of the last status
            self.notified = 0 # timestamp of the last notification
            self.flap_window = flapping[0]
            self.flap_threshold = flapping[1] # 0.0 .. 1.0
            self.flap_change_count = 0
            self.flap_changes = 0
            self.flap_pos = 0

        def flap_reset(self):
            self.flap_change_count = 0
            self.flap_changes = 0
            self.flap_pos = 0

        def flap_update(self, bit):
            # pop the oldest bit from array
            old_bit = (self.flap_changes & (1 << self.flap_pos))
            # reset the position of oldest (now newest) bit to 0
            self.flap_changes ^= old_bit
            # set the bit
            self.flap_changes |= (bit << self.flap_pos)
            # get just the bit, without its position
            old_bit >>= self.flap_pos
            # advance the position marker to the next bit
            self.flap_pos = (self.flap_pos + 1) % self.flap_window
            # update the counter that tracks 1's
            self.flap_change_count -= old_bit
            self.flap_change_count += bit

        def is_flapping(self):
            flap_index = float(self.flap_change_count) / self.flap_window
            return (flap_index > self.flap_threshold)

        def update(self, status, timestamp):
            # discard statuses that arrived out of order, so they don't count
            # towards flapping
            if timestamp < self.status_time:
                # FIXME: when the server jumps far back in time, it can take
                # a long time for hailerter to catch up
                return STATUS_DISCARD

            # the flow went missing and stayed this way for a long time
            # (assuming that notification interval is much larger than flow's
            # collection interval)
            if status is STATUS_MISSING and self.status is STATUS_MISSING:
                self.flap_reset()

            if self.is_flapping():
                # this mixes nicely with recovery from flapping
                old_status = STATUS_FLAPPING
            else:
                old_status = self.status

            # TODO: interpolate messages that were missing but haven't
            # triggered reporting that the stream is missing
            self.flap_update(int(status != self.status))

            self.status = status
            self.status_time = timestamp
            return old_status

        def notification_sent(self, timestamp = None, reset_timer = False):
            if reset_timer:
                self.notified = 0
            elif timestamp is not None:
                self.notified = timestamp
            else:
                self.notified = int(time.time())

    # }}}
    #-------------------------------------------------------

    def __init__(self, options):
        self._check_timeouts = False
        # a queue with time when to deem some data flow to be missing
        self._when_goes_missing = seismometer.prio_queue.PrioQueue()
        self._flows = {}
        self._future_margin = 5 * 60 # 5 minutes
        self.notification_interval = options.notification_interval
        self.default_interval = options.default_interval
        self.missing_after = options.missing
        if options.flapping_window is not None and \
           options.flapping_threshold is not None:
            self.flapping = (options.flapping_window,
                             options.flapping_threshold)
        else:
            self.flapping = (1, 1.0)

    #-------------------------------------------------------
    # SIGALRM {{{

    def install_alarm(self):
        signal.signal(signal.SIGALRM, self._handle_alarm)
        signal.alarm(1)

    def _handle_alarm(self, sig, stack_frame):
        self._check_timeouts = True
        signal.alarm(1)

    # }}}
    #-------------------------------------------------------
    # unpack(message) {{{

    def unpack(self, message):
        # NOTE: tuple with two strings is hashable and can be used as a key
        # for dictionary
        flow_id = (
            message.aspect,
            json.dumps(message.location.to_dict(), sort_keys = True,
                       separators = (",", ":"))
        )
        if message.interval is not None:
            interval = message.interval
        else:
            interval = self.default_interval
        status = None
        # TODO: also metrics without state but with thresholds
        if message.state is not None:
            if message.severity is None or message.severity == "expected":
                status = STATUS_OK
            elif message.severity == "warning":
                # TODO: how to treat warnings? (self.options)
                status = STATUS_ERROR
            elif message.severity == "error":
                status = STATUS_ERROR
        return (flow_id, int(message.time), interval, status)

    # }}}
    #-------------------------------------------------------

    def missing_messages(self):
        if not self._check_timeouts:
            # don't do the busy work more often than on schedule
            return ()
        self._check_timeouts = False
        now = int(time.time())

        if len(self._when_goes_missing) == 0 or \
           self._when_goes_missing.peek()[0] > now:
            # nothing is missing now
            return ()

        missing = []
        while self._when_goes_missing.peek()[0] <= now:
            flow_id = self._when_goes_missing.peek()[1]
            flow = self._flows[flow_id]

            old_status = flow.status
            flow.update(STATUS_MISSING, now)
            flow.notification_sent(now)
            # NOTE: use most current flapping status, after updating flow's
            # status
            if not flow.is_flapping():
                missing.append({
                    "status": "missing",
                    "time": now,
                    "aspect": flow.aspect,
                    "location": flow.location,
                    "details": {
                        # TODO: last seen time
                        "previous_status": str(old_status),
                    },
                })
            else:
                missing.append({
                    "status": "flapping",
                    "time": now,
                    "aspect": flow.aspect,
                    "location": flow.location,
                    "details": {
                        "window": flow.flap_window,
                        "changes": flow.flap_change_count,
                    },
                })

            # XXX: now that the flow is missing we don't need to _detect_ if
            # it's missing, we just need to _remind_ that it is (assuming that
            # notification interval is much larger than flow's collection
            # interval)
            self._when_goes_missing[flow_id] = now + self.notification_interval
        return missing

    def reschedule_missing_notification(self, flow_id, timestamp, interval):
        if interval is not None and self.missing_after is not None:
            self._when_goes_missing[flow_id] = \
                timestamp + interval * self.missing_after

    def update_state(self, message):
        (flow_id, timestamp, interval, status) = self.unpack(message)
        if status is None:
            # TODO: self.reschedule_missing_notification() also for metrics
            return None

        now = int(time.time())
        if timestamp > now + self._future_margin:
            # the message is too far in the future, discard it
            return None

        self.reschedule_missing_notification(flow_id, timestamp, interval)

        if flow_id not in self._flows:
            self._flows[flow_id] = StateTracker.Flow(
                aspect = message.aspect,
                location = message.location.to_dict(),
                flapping = self.flapping,
            )
        flow = self._flows[flow_id]

        old_status = flow.update(status, timestamp)
        if old_status == STATUS_DISCARD:
            return None

        if flow.is_flapping():
            if now - flow.notified < self.notification_interval:
                return None
            else:
                flow.notification_sent(now)
                return {
                    "status": "flapping",
                    "time": timestamp,
                    "aspect": flow.aspect,
                    "location": flow.location,
                    "details": {
                        "window": flow.flap_window,
                        "changes": flow.flap_change_count,
                    },
                }

        if status == STATUS_OK:
            if old_status is None or old_status == STATUS_OK:
                return None
            else:
                flow.notification_sent(reset_timer = True)
                return {
                    "status": "recovered",
                    "time": timestamp,
                    "aspect": flow.aspect,
                    "location": flow.location,
                    "details": {
                        "state": message.state,
                        "previous_status": str(old_status),
                    },
                }

        if status == old_status and \
           now - flow.notified < self.notification_interval:
            # the same error status as the last time, but a notification was
            # sent recently
            return None

        # XXX: status != STATUS_OK; either a degradation or a reminder
        flow.notification_sent(now)
        return {
            "status": "degraded",
            "time": timestamp,
            "aspect": flow.aspect,
            "location": flow.location,
            "details": {
                "state": message.state,
                "severity": message.severity,
                "previous_status": str(old_status),
            },
        }

#-----------------------------------------------------------------------------
# control commands {{{

def handle_request(stm, request):
    # TODO: handle the request properly
    print "request: %s" % (json.dumps(request),)
    return {}

# }}}
#-----------------------------------------------------------------------------

# poll for a single handle may be a little overkill, but it should mix nice
# with SIGALRM and it allows to close STDIN and exit gracefully
poll = seismometer.poll.Poll()
poll.add(sys.stdin)
data_handles = set([sys.stdin])

if options.control_socket is not None:
    poll.add(ControlSocket(options.control_socket))

stm = StateTracker(options)
stm.install_alarm()

while len(data_handles) > 0:
    read_handles = poll.poll(timeout = None) # 1s loop

    for handle in read_handles:
        if isinstance(handle, ControlSocket):
            conn = handle.accept()
            poll.add(conn)
            continue
        elif isinstance(handle, ControlSocketClient):
            request = handle.read()
            if request is not None:
                result = handle_request(stm, request)
                handle.send(result)
            poll.remove(handle)
            handle.close()
            continue

        # XXX: data handle, i.e. `sys.stdin'

        # TODO: read as much as possible, so the flush at the end of loop
        # works for an aggregate instead of every single line
        line = handle.readline()
        if line == "":
            poll.remove(handle)
            data_handles.discard(handle)
            continue
        rec = json.loads(line) # TODO: catch deserialization errors
        if not seismometer.message.is_state(rec):
            continue

        result = stm.update_state(seismometer.message.Message(rec))
        if result is not None:
            json.dump(result, sys.stdout, sort_keys = True)
            sys.stdout.write("\n")

    missing = stm.missing_messages()
    for msg in missing:
        json.dump(msg, sys.stdout, sort_keys = True)
        sys.stdout.write("\n")

    sys.stdout.flush()

#-----------------------------------------------------------------------------
# vim:ft=python:foldmethod=marker
